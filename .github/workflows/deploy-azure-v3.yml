name: Deploy Service Azure (v3)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches: [ main ]
    tags:
      - 'deploy-v3-*'
    paths:
      - 'apps/deploy/**'
      - 'packages/**'
      - 'bun.lock'
      - 'turbo.json'
      - '.github/workflows/deploy-azure-v3.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/deploy/Dockerfile
          push: true
          provenance: false
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            NODE_ENV=production

      - name: Output image ref
        run: echo "IMAGE_REF=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Upload artifact (SBOM placeholder)
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: /dev/null

  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-22.04
    needs: build-and-push
    timeout-minutes: 15
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set env vars
        id: envprep
        run: |
          echo "Creating runtime-env.txt" && echo '' > runtime-env.txt
          {
            echo "POSTGRES_URL=${{ secrets.POSTGRES_URL }}";
            echo "BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}";
            echo "BETTER_GITHUB_CLIENT_ID=${{ secrets.BETTER_GITHUB_CLIENT_ID }}";
            echo "BETTER_GITHUB_CLIENT_SECRET=${{ secrets.BETTER_GITHUB_CLIENT_SECRET }}";
            echo "TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}";
            echo "NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}";
            echo "LOG_LEVEL=info";
            echo "PLATFORM_MODE=azure";
            echo "SERVICE_NAME=deploy";
          } >> runtime-env.txt
          echo "file=runtime-env.txt" >> $GITHUB_OUTPUT

      - name: Deploy (create or update)
        id: deploy
        uses: azure/CLI@v2
        with:
          inlineScript: |
            VERSION_REF="${{ needs.build-and-push.outputs.version }}"
            if [ -z "$VERSION_REF" ]; then VERSION_REF="latest"; fi
            IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/deploy-service:$VERSION_REF"
            APP_NAME="${{ secrets.AZURE_DEPLOY_APP_NAME }}"
            if [ -z "$APP_NAME" ] || [ "$APP_NAME" = "" ]; then APP_NAME="libra-deploy-v3"; fi
            RG="${{ secrets.AZURE_RESOURCE_GROUP }}"
            ENV_NAME="${{ secrets.AZURE_CONTAINERAPPS_ENV }}"
            echo "Using image $IMAGE for app $APP_NAME"
            if az containerapp show -n "$APP_NAME" -g "$RG" >/dev/null 2>&1; then
              az containerapp update -n "$APP_NAME" -g "$RG" \
                --image "$IMAGE" \
                --set-env-vars "@${{ steps.envprep.outputs.file }}" \
                --min-replicas 1 --max-replicas 2
            else
              az containerapp create -n "$APP_NAME" -g "$RG" --environment "$ENV_NAME" \
                --image "$IMAGE" --ingress external --target-port 8080 \
                --env-vars "@${{ steps.envprep.outputs.file }}" \
                --min-replicas 1 --max-replicas 2
            fi
            URL=$(az containerapp show -n "$APP_NAME" -g "$RG" --query properties.configuration.ingress.fqdn -o tsv || true)
            echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Output URL
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}"

      - name: Create GitHub Deployment Record
        uses: chrnorm/deployment-action@v2
        if: steps.deploy.outputs.url != ''
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ github.event.inputs.environment || 'production' }}
          environment-url: ${{ steps.deploy.outputs.url }}
          description: 'Deploy service Azure v3'
          ref: ${{ github.sha }}
