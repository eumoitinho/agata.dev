name: Deploy Azure V3

on:
  push:
    branches: [main]
    paths:
      - 'apps/deploy-azure/**'
      - '.github/workflows/deploy-azure-v3.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/deploy-azure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AZURE_WEBAPP_NAME: libra-deploy-v3-app
  AZURE_WEBAPP_PACKAGE_PATH: './apps/deploy-azure'
  NODE_VERSION: '20'

jobs:
  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: bun install

      - name: Type checking
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: bun run typecheck

      - name: Lint code
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: bun run lint

      - name: Build application
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/dist
            ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/package.json
            ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/bun.lockb
          retention-days: 1

  # Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Build and push Docker image
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME_DEV }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD_DEV }}

      - name: Build Docker image
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: |
          docker build \
            -f docker/Dockerfile \
            -t ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/libra-deploy-v3:${{ github.sha }} \
            -t ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/libra-deploy-v3:latest \
            .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/libra-deploy-v3:${{ github.sha }}
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_DEV }}/libra-deploy-v3:latest

      - name: Deploy to Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          acrName: ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME_DEV }}
          containerAppName: ${{ env.AZURE_WEBAPP_NAME }}-dev
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP_DEV }}
          imageToBuild: libra-deploy-v3:${{ github.sha }}
          environmentVariables: |
            AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
            AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
            AZURE_RESOURCE_GROUP=${{ secrets.AZURE_RESOURCE_GROUP_DEV }}
            AZURE_LOCATION=${{ secrets.AZURE_LOCATION }}
            NODE_ENV=development
            LOG_LEVEL=debug

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-development]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Build and push Docker image
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_PROD }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME_PROD }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD_PROD }}

      - name: Build Docker image
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: |
          docker build \
            -f docker/Dockerfile \
            -t ${{ secrets.AZURE_CONTAINER_REGISTRY_PROD }}/libra-deploy-v3:${{ github.sha }} \
            -t ${{ secrets.AZURE_CONTAINER_REGISTRY_PROD }}/libra-deploy-v3:latest \
            -t ${{ secrets.AZURE_CONTAINER_REGISTRY_PROD }}/libra-deploy-v3:stable \
            .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_PROD }}/libra-deploy-v3:${{ github.sha }}
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_PROD }}/libra-deploy-v3:latest
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_PROD }}/libra-deploy-v3:stable

      - name: Deploy to Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          acrName: ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME_PROD }}
          containerAppName: ${{ env.AZURE_WEBAPP_NAME }}
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP_PROD }}
          imageToBuild: libra-deploy-v3:${{ github.sha }}
          environmentVariables: |
            AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
            AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
            AZURE_RESOURCE_GROUP=${{ secrets.AZURE_RESOURCE_GROUP_PROD }}
            AZURE_LOCATION=${{ secrets.AZURE_LOCATION }}
            NODE_ENV=production
            LOG_LEVEL=info

      - name: Run health checks
        run: |
          APP_URL=$(az containerapp show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)

          if [ -n "$APP_URL" ]; then
            APP_URL="https://$APP_URL"
            echo "Testing health endpoint: $APP_URL/health"

            # Wait for deployment to complete
            sleep 60

            # Test health endpoint with retry
            for i in {1..5}; do
              if curl -f -s "$APP_URL/health" > /dev/null; then
                echo "✅ Health check passed"
                break
              else
                echo "⏳ Health check attempt $i failed, retrying..."
                sleep 30
              fi

              if [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts"
                exit 1
              fi
            done

            # Test detailed health
            if curl -f -s "$APP_URL/health/detailed" > /dev/null; then
              echo "✅ Detailed health check passed"
            else
              echo "⚠️  Detailed health check failed"
            fi

            echo "🎉 Deployment completed successfully!"
            echo "Application URL: $APP_URL"
          else
            echo "❌ Could not retrieve application URL"
            exit 1
          fi