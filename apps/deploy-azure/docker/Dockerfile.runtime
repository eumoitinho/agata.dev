# Runtime Container Dockerfile
# Optimized for running deployed applications

# Multi-stage build for optimized image size
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY bun.lockb* ./
COPY yarn.lock* ./
COPY pnpm-lock.yaml* ./

# Install dependencies based on lockfile
RUN if [ -f bun.lockb ]; then \
      npm install -g bun && bun install --frozen-lockfile --production=false; \
    elif [ -f pnpm-lock.yaml ]; then \
      npm install -g pnpm && pnpm install --frozen-lockfile; \
    elif [ -f yarn.lock ]; then \
      npm install -g yarn && yarn install --frozen-lockfile; \
    else \
      npm ci; \
    fi

# Copy source code
COPY . .

# Build the application
ARG BUILD_COMMAND="npm run build"
RUN eval $BUILD_COMMAND

# Remove dev dependencies
RUN if [ -f bun.lockb ]; then \
      bun install --frozen-lockfile --production; \
    elif [ -f pnpm-lock.yaml ]; then \
      pnpm prune --production; \
    elif [ -f yarn.lock ]; then \
      yarn install --production --frozen-lockfile; \
    else \
      npm prune --production; \
    fi

# Production stage
FROM node:20-alpine

# Add non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy built application and production dependencies
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Copy built assets (adjust paths based on framework)
COPY --from=builder --chown=nodejs:nodejs /app/dist* ./dist
COPY --from=builder --chown=nodejs:nodejs /app/build* ./build
COPY --from=builder --chown=nodejs:nodejs /app/.next* ./.next
COPY --from=builder --chown=nodejs:nodejs /app/public* ./public

# Switch to non-root user
USER nodejs

# Set production environment
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"

# Start command
ARG START_COMMAND="node"
ARG START_ARGS="index.js"
CMD $START_COMMAND $START_ARGS